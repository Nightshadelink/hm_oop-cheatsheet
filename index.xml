<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OOP-Cheatsheet on Cheatsheet for OOP-Course</title><link>https://nightshadelink.github.io/hm_oop-cheatsheet/</link><description>Recent content in OOP-Cheatsheet on Cheatsheet for OOP-Course</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://nightshadelink.github.io/hm_oop-cheatsheet/index.xml" rel="self" type="application/rss+xml"/><item><title>Abstraktion</title><link>https://nightshadelink.github.io/hm_oop-cheatsheet/oop/abstraktion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nightshadelink.github.io/hm_oop-cheatsheet/oop/abstraktion/</guid><description>Abstraktion versteckt Implementierungsdetails und gibt nur die Schnittstellen bekannt Erbende Klasse müssen diese Schnittstellen selbst implementieren Abstraktionen können sein: Abstract Class Interface Abstract Methods (in einer Klasse) Abstract Class Eine abstract class muss mit dem Schlüsselwort abstract deklariert werden Die Klasse kann abstract und non-abstract Methoden beinhalten Kann nicht Initialisiert werden Kann Konstruktoren und static Methoden beinhalten abstract class Blume{ // Abstrakte Methode &amp;#34;duft()&amp;#34; - muss dann von jeder Subklasse implementiert werden abstract String duft(); // nicht abstrakte Methode kann von jeder Subklasse genutzt werden public String pflanzen(){ System.</description></item><item><title>Code - Account</title><link>https://nightshadelink.github.io/hm_oop-cheatsheet/codebucket/account/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nightshadelink.github.io/hm_oop-cheatsheet/codebucket/account/</guid><description/></item><item><title>Code - Bank</title><link>https://nightshadelink.github.io/hm_oop-cheatsheet/codebucket/bank/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nightshadelink.github.io/hm_oop-cheatsheet/codebucket/bank/</guid><description/></item><item><title>Code - Carpetfactory</title><link>https://nightshadelink.github.io/hm_oop-cheatsheet/codebucket/carpetfactory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nightshadelink.github.io/hm_oop-cheatsheet/codebucket/carpetfactory/</guid><description/></item><item><title>Code - ChocolateBox</title><link>https://nightshadelink.github.io/hm_oop-cheatsheet/codebucket/chocolatebox/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nightshadelink.github.io/hm_oop-cheatsheet/codebucket/chocolatebox/</guid><description/></item><item><title>Code - Cinema</title><link>https://nightshadelink.github.io/hm_oop-cheatsheet/codebucket/cinema/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nightshadelink.github.io/hm_oop-cheatsheet/codebucket/cinema/</guid><description/></item><item><title>Code - Copyshop</title><link>https://nightshadelink.github.io/hm_oop-cheatsheet/codebucket/copy_shop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nightshadelink.github.io/hm_oop-cheatsheet/codebucket/copy_shop/</guid><description/></item><item><title>Code - Default Interfaces</title><link>https://nightshadelink.github.io/hm_oop-cheatsheet/codebucket/default_interfaces/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nightshadelink.github.io/hm_oop-cheatsheet/codebucket/default_interfaces/</guid><description/></item><item><title>Code - Enum</title><link>https://nightshadelink.github.io/hm_oop-cheatsheet/codebucket/enum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nightshadelink.github.io/hm_oop-cheatsheet/codebucket/enum/</guid><description/></item><item><title>Code - Flights</title><link>https://nightshadelink.github.io/hm_oop-cheatsheet/codebucket/flights/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nightshadelink.github.io/hm_oop-cheatsheet/codebucket/flights/</guid><description>Flight package src; public interface Flight { public int getDistance(); default public double getFinalPrice(FlightClass flightClass) { return getDistance() * flightClass.getPriceFactor(); } } Airport package src; import java.util.Objects; public class Airport { private final String name; public Airport(String name) { this.name = name; } public String getName() { return name; } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.</description></item><item><title>Code - Immutable Rational</title><link>https://nightshadelink.github.io/hm_oop-cheatsheet/codebucket/immutablerational/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nightshadelink.github.io/hm_oop-cheatsheet/codebucket/immutablerational/</guid><description/></item><item><title>Code - Inheritance</title><link>https://nightshadelink.github.io/hm_oop-cheatsheet/codebucket/inheritance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nightshadelink.github.io/hm_oop-cheatsheet/codebucket/inheritance/</guid><description/></item><item><title>Code - Intersection</title><link>https://nightshadelink.github.io/hm_oop-cheatsheet/codebucket/intersection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nightshadelink.github.io/hm_oop-cheatsheet/codebucket/intersection/</guid><description/></item><item><title>Code - Pets</title><link>https://nightshadelink.github.io/hm_oop-cheatsheet/codebucket/pets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nightshadelink.github.io/hm_oop-cheatsheet/codebucket/pets/</guid><description/></item><item><title>Code - Points</title><link>https://nightshadelink.github.io/hm_oop-cheatsheet/codebucket/points/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nightshadelink.github.io/hm_oop-cheatsheet/codebucket/points/</guid><description/></item><item><title>Code - Rational</title><link>https://nightshadelink.github.io/hm_oop-cheatsheet/codebucket/rational/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nightshadelink.github.io/hm_oop-cheatsheet/codebucket/rational/</guid><description/></item><item><title>Code - Shapes</title><link>https://nightshadelink.github.io/hm_oop-cheatsheet/codebucket/shapes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nightshadelink.github.io/hm_oop-cheatsheet/codebucket/shapes/</guid><description/></item><item><title>Code - Sum</title><link>https://nightshadelink.github.io/hm_oop-cheatsheet/codebucket/sum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nightshadelink.github.io/hm_oop-cheatsheet/codebucket/sum/</guid><description/></item><item><title>Code - Time</title><link>https://nightshadelink.github.io/hm_oop-cheatsheet/codebucket/time/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nightshadelink.github.io/hm_oop-cheatsheet/codebucket/time/</guid><description/></item><item><title>Credits</title><link>https://nightshadelink.github.io/hm_oop-cheatsheet/credits/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nightshadelink.github.io/hm_oop-cheatsheet/credits/</guid><description>Contributors Thanks to them for making Open Source Software a better place !
And a special thanks to @vjeantet for his work on docdock, a fork of hugo-theme-learn. v2.0.0 of this theme is inspired by his work.
Packages and libraries mermaid - generation of diagram and flowchart from text in a similar manner as markdown font awesome - the iconic font and CSS framework jQuery - The Write Less, Do More, JavaScript Library lunr - Lunr enables you to provide a great search experience without the need for external, server-side, search services&amp;hellip; horsey - Progressive and customizable autocomplete component clipboard.</description></item><item><title>Instanzvariablen</title><link>https://nightshadelink.github.io/hm_oop-cheatsheet/oop/instanzvariablen/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nightshadelink.github.io/hm_oop-cheatsheet/oop/instanzvariablen/</guid><description>Instanzvariablen sind nur innerhalb der Klasse sichtbar mit Hilfe von getter und setter können diese abgerufen oder verändert werden setter sind vom typ void und sollten als Argument den Datentyp der jeweiligen Instanzvariable haben getter geben den Datentyp zurück der Instanzvariable und sollten keine Argumente haben durch den this Operator kann man auf die Instanzvariablen direkt zugreifen Beispiel: Einfache Klasse:
public class Fahrzeug { private String name; } Beispiel Klasse mit getter und setter:</description></item><item><title>Klassen Deklaration mit Vererbung</title><link>https://nightshadelink.github.io/hm_oop-cheatsheet/oop/klassendeklaration_mit_vererbung/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nightshadelink.github.io/hm_oop-cheatsheet/oop/klassendeklaration_mit_vererbung/</guid><description>class Auto extends Fahrzeug { private String nummernSchild; public void abs(){ // code } } Die Klasse Auto ist eine Unterklasse von der Klasse Fahrzeug (Spezialisierung) Die Klasse Auto übernimmt automatisch alle Funktionen und Attribute der Klasse Fahrzeug Die Klasse Auto kann die Funktionen der Klasse Fahrzeug erweitern und/oder überschreiben mit super können Methoden und Variablen der Basis-Klasse direkt aufgerufen werden dies gilt auch für den Konstruktor Konstruktoren Jede Klasse hat automatisch einen gleichnamigen Konstruktor dieser kann explizt sein (angegeben) oder implizit (nicht angegeben) sein Der Konstruktor wird automatisch beim Erstellen eines Objekt ausgeführt Konstruktoren haben keinen return Wert Beispiel:</description></item><item><title>Klassendeklaration</title><link>https://nightshadelink.github.io/hm_oop-cheatsheet/oop/klassendeklaration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nightshadelink.github.io/hm_oop-cheatsheet/oop/klassendeklaration/</guid><description>class MyClass { // Instanzvariablen // Instanzmethoden } Beispiel:
public class Fahrzeug { private String name; public void fahr(){ // code } }</description></item><item><title>Methoden</title><link>https://nightshadelink.github.io/hm_oop-cheatsheet/oop/methoden/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nightshadelink.github.io/hm_oop-cheatsheet/oop/methoden/</guid><description> Code wiederverwenden statt neuschreiben Testbarkeit erhöhen Lesbarkeit verbessern Allgemein
&amp;lt;Sichtbarkeit&amp;gt; &amp;lt;Rückgabewert&amp;gt; &amp;lt;Methodenname&amp;gt;(&amp;lt;Parameter&amp;gt;){ // Code } Beispiel:
// addition zweier Zahlen a und b public int sum (int a, int b) { // lokale variable int result; // Berechnung result = a + b; // Ergebnis zurückgeben return result; } Vereinfacht:
// addition zweier Zahlen a und b public int sum (int a, int b) { // Ergebnis direkt zurückgeben return (a + b); }</description></item><item><title>Objekt</title><link>https://nightshadelink.github.io/hm_oop-cheatsheet/oop/object/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nightshadelink.github.io/hm_oop-cheatsheet/oop/object/</guid><description>// Deklaration einer Variable vom Objekt-Typ &amp;#34;String&amp;#34; String s; // Konstruktur aufrufen s = new String (&amp;#34;Hallo Welt&amp;#34;); // Klassenmethode ausführen die sich auf den Inhalt der Variable bezieht char c = s.chartAt(4);</description></item><item><title>Polymorphismus</title><link>https://nightshadelink.github.io/hm_oop-cheatsheet/oop/polymorphismus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nightshadelink.github.io/hm_oop-cheatsheet/oop/polymorphismus/</guid><description>Die Vielfältigkeit bei der Objekte in verschiedenen Situationen verschieden reagieren können Variante 1: Methodenüberladung Deklaration einer Methode mit verschiedenen übergabe Parametern je nachdem mit wie viel Parametern die Methode aufgerufen wird, verändert sie das Verhalten der Klasse public class Fahrzeug { private String name; // Methode ohne Argumente public faehrt(){ // code } // Methode mit Argumenten public faehrt(String Richtung){ // code } // Methode mit Argumenten public faehrt(String Richtung, int Geschwindigkeit){ // code } } Variante 2: Methodenüberschreibung Die Subklasse (Kindklasse) kann Methoden der Basisklasse (Eltern-Klasse) überschreiben Basis-Klasse Fahrzeug</description></item><item><title>Showcase</title><link>https://nightshadelink.github.io/hm_oop-cheatsheet/showcase/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nightshadelink.github.io/hm_oop-cheatsheet/showcase/</guid><description>TAT by OVH Tshark.dev by Ross Jacobs inteliver by Amir Lavasani</description></item><item><title>Vorlesungsthemen</title><link>https://nightshadelink.github.io/hm_oop-cheatsheet/vorlesungsthemen/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nightshadelink.github.io/hm_oop-cheatsheet/vorlesungsthemen/</guid><description>Übersicht Einführung Objektorientierte Programmierung Attachments 01_einfuehrung_objektorientierte_programmierung.pdf (312 KB) Attachments 01_sum.java (569 B) Datentypen und Variablen Attachments 02_datentypen_und_variablen.pdf (459 KB) Objektorientierte Konzepte Attachments 03_objektorientierte_konzepte.pdf (212 KB) Objektvariablen Attachments 04_objektvariablen.pdf (128 KB) Attachments 04_account.zip (1 KB) Methoden und Konstruktoren Attachments 05_methoden_und_konstruktoren.pdf (164 KB) Attachments 05_rational.zip (1 KB) ArrayList Einführung / Testen mit JUnit 5 / Dokumentation mit Javadoc Attachments 06_arraylist.pdf (71 KB) 06_dokumentation_mit_javadoc.pdf (76 KB) 06_testen_mit_junit-5.pdf (121 KB) Statische Klassenelemente Attachments 07_statische_klassenelemente.pdf (165 KB) Attachments 07_enum_beispiele.</description></item></channel></rss>