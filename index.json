[{"uri":"https://nightshadelink.github.io/hm_oop-cheatsheet/datentypen/","title":"Datentypen","tags":[],"description":"","content":" Type Art Wertebereich Operatoren int Ganze Zahlen (Integer) zwischen -2^31 und + (2^31)-1 + - * / % double Gleitkommazahlen Realezahlen + - * / boolean boolean Werte true oder false \u0026amp;\u0026amp; || ! char Zeichen abc\u0026hellip;z und Satzzeichen String Zeichenketten "},{"uri":"https://nightshadelink.github.io/hm_oop-cheatsheet/deklaration_und_wertzuweisung/","title":"Deklaration und Wertzuweisung","tags":[],"description":"","content":"// Allgemein // \u0026lt;Datentyp\u0026gt; \u0026lt;Variablenname\u0026gt;; // Deklaration einfach int a; // Deklaration mehrfach int a,c; // Deklaration und gleichzeitge Wertzuweisung int a = 23; // Wertezuweisung a = 13212; // Deklaration und Zuweisung durch Berechnung int c = a + b; "},{"uri":"https://nightshadelink.github.io/hm_oop-cheatsheet/vergleichsoperatoren/","title":"Vergleichsoperatoren","tags":[],"description":"","content":" Operator Bedeutung == gleich != ungleich \u0026lt; kleiner als \u0026gt; größer als \u0026lt;= kleiner gleich \u0026gt;= größer gleich "},{"uri":"https://nightshadelink.github.io/hm_oop-cheatsheet/konsolenausgabe/","title":"Konsolenausgabe","tags":[],"description":"","content":"// Variablen Deklaration und Zuweisung String s = \u0026#34;Happy Hacking!\u0026#34; // einfache Ausgabe System.out.print(s); // Ausgabe mit Zeilenumbruch System.out.println(s); // Verknüpfung von Strings System.out.println(\u0026#34;Hallo Welt!\u0026#34; + s); // Leerzeile System.out.println(); "},{"uri":"https://nightshadelink.github.io/hm_oop-cheatsheet/typenumwandlung-casting/","title":"Typenumwandlung (Casting)","tags":[],"description":"","content":"// Variablen Deklaration und Zuweisung String s = \u0026#34;Java 101\u0026#34; // Konvertierung in \u0026#34;Java 101\u0026#34; zu einem Ganzzahlenwert int Integer.parseInt(String s); // Konvertierung in \u0026#34;Java 101\u0026#34; zu einem Double-Wert double Double.parseDouble(s); // Konvertierung in \u0026#34;Java 101\u0026#34; zu einem Long-Wert long Long.parseLong(String s); "},{"uri":"https://nightshadelink.github.io/hm_oop-cheatsheet/programmfluss_und_kontrollstrukturen/","title":"Programmfluss und Kontrollstrukturen","tags":[],"description":"","content":"Kontrollstruktur IF Statement\n// Wenn x größer als y ist, dann... if (x \u0026gt; y) { // ...führe den Code in dem Block aus } IF-ELSE STATEMENT\n// Wenn x größer als y ist, dann... if (x \u0026gt; y) { // ...führe den Code in dem Block aus }else{ // ... sonst führe diesen Block aus } Verschachtelte Bedingungen\n// Wenn x größer als y ist, dann... if (x \u0026gt; y) { // ...führe den Code in dem Block aus // wenn x gleich y ist... }else if(x == y){ // .. führe diesen Block aus }else{ // ... sonst führe diesen Block aus } SWITCH STATEMENT\nswitch (VARIABLE-ZUM-AUSWERTEN) { case value: Statement; break; ... ... ... default: Statement; break; } ANATOMY OF A LOOP STATEMENT FOR LOOP STATEMENT\nfor (zaehlvariable; Abbruchbedingung; Schrittweite){ // Code } Beispiel:\nZähle von 0 bis 10 in Einer-Schritten und gib die Zahl auf der Konsole aus:\nfor (int i = 0; i \u0026lt;= 10; i++) { System.out.println(i); } FOR-EACH STATEMENT\nfor(dataType item : array) { // code } Beispiel:\ngib alle Elemente aus dem Array numbers aus\n// array of numbers int[] numbers = {100, 200, 300, 400}; // for each loop for (int number: numbers) { System.out.println(number); } WHILE LOOP STATEMENT\nwhile(Abbruchbedingung){ // code } Beispiel:\nZähle von 0 bis 10 in Einer-Schritten und gib die Zahl auf der Konsole aus:\n// Zählvariable int i = 0; while (i \u0026lt;= 10){ System.out.println(i); i++; // i = i +1 ; } DO-WHILE LOOP STATEMENT\nFußgesteuert -\u0026gt; der Block wird immer mind. einmal ausgeführt.\ndo{ // code } while(Abbruchbedingung); Beispiel:\nZähle von 0 bis 10 in Einer-Schritten und gib die Zahl auf der Konsole aus:\nint i = 0; do{ System.out.println(i); i++; } while(i \u0026lt;= 10); "},{"uri":"https://nightshadelink.github.io/hm_oop-cheatsheet/array/","title":"Array","tags":[],"description":"","content":"int[] ai; // array of int Object[] ao; // array of Object Beispiel: // Deklaration und Zuweisung int[] zahlen = { 1, 1, 2, 6, 24, 120, 720, 5040 }; String[] aas = { \u0026#34;array\u0026#34;, \u0026#34;of\u0026#34;, \u0026#34;String\u0026#34;, }; "},{"uri":"https://nightshadelink.github.io/hm_oop-cheatsheet/zugriffsbeschraenkungen/","title":"Zugriffsbeschränkungen","tags":[],"description":"","content":" default (No keyword required) private public protected Die Standard-Sichtbarkeit ist \u0026ldquo;package-private\u0026rdquo; (obwohl diese nicht explizit verwendet werden kann), was bedeutet, dass das Feld innerhalb desselben Pakets, zu dem die Klasse gehört, zugänglich ist. Dies gilt jedoch nicht für Schnittstellenmitglieder, für die der Standardwert \u0026ldquo;public\u0026rdquo; ist.\nNON ACCESS MODIFIERS static final transient abstract synchronized volatile "},{"uri":"https://nightshadelink.github.io/hm_oop-cheatsheet/oop/abstraktion/","title":"Abstraktion","tags":[],"description":"","content":" Abstraktion versteckt Implementierungsdetails und gibt nur die Schnittstellen bekannt Erbende Klasse müssen diese Schnittstellen selbst implementieren Abstraktionen können sein: Abstract Class Interface Abstract Methods (in einer Klasse) Abstract Class Eine abstract class muss mit dem Schlüsselwort abstract deklariert werden Die Klasse kann abstract und non-abstract Methoden beinhalten Kann nicht Initialisiert werden Kann Konstruktoren und static Methoden beinhalten abstract class Blume{ // Abstrakte Methode \u0026#34;duft()\u0026#34; - muss dann von jeder Subklasse implementiert werden abstract String duft(); // nicht abstrakte Methode kann von jeder Subklasse genutzt werden public String pflanzen(){ System.out.println(\u0026#34;Ich werden gepflanzt\u0026#34;); } } public class Rose extends Blume{ // Implementierung der \u0026#34;duft()\u0026#34; Methode private String duft(){ System.out.println(\u0026#34;Rosen duften gut!\u0026#34;); } } Interface Interface ist a blueprint (Bauplan) einer class. Beinhaltet nur Abstrakte Methoden Beispiel:\n// Interface gibt die Methoden vor die Implementiert werden müssen interface Papier{ void drucken(); } // Sub-Klasse implementiert die Vorgaben public class A4 implements Papier{ public void drucken(){ System.out.println(\u0026#34;Seite wird gedruckt\u0026#34;); } } "},{"uri":"https://nightshadelink.github.io/hm_oop-cheatsheet/beispiele/","title":"Beispiele","tags":[],"description":"","content":"Vorlesungsbeispiele: Sum.java (Beispiel aus Vorlesung) account.zip (Beispiel aus Vorlesung) Rational.zip ImmutableRational.java (22.11.2022) Datei Enum Beispiele.zip copy_shop.zip Datei shapes.zip default_interface.zip inheritance.zip Datei inheritance.zip (erweitert um abstract und Redefinition) pets.zip Praktikumsbeispiele: LVL2 ChocolateBox.pdf (KW 42) ChocolateBox.java (Musterlösung) Datei CarpetFactory.pdf (KW 42) Datei CarpetFactory.java (Musterlösung) Datei Time.pdf (KW 43, Gitlab-Projekt) Datei Cinema.pdf (Zusatzaufgabe) Datei Bank.pdf (KW 46, Aufgabenstellung) Datei Intersection.pdf (KW 48, Gitlab-Projekt) LVL3 ASDF LVL4 ASDF LVL5 ASDF LVL6 ASDF \u0026hellip;\nComming Soon\n"},{"uri":"https://nightshadelink.github.io/hm_oop-cheatsheet/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://nightshadelink.github.io/hm_oop-cheatsheet/credits/","title":"Credits","tags":[],"description":"","content":"Contributors Thanks to them for making Open Source Software a better place !\nAnd a special thanks to @vjeantet for his work on docdock, a fork of hugo-theme-learn. v2.0.0 of this theme is inspired by his work.\nPackages and libraries mermaid - generation of diagram and flowchart from text in a similar manner as markdown font awesome - the iconic font and CSS framework jQuery - The Write Less, Do More, JavaScript Library lunr - Lunr enables you to provide a great search experience without the need for external, server-side, search services\u0026hellip; horsey - Progressive and customizable autocomplete component clipboard.js - copy text to clipboard highlight.js - Javascript syntax highlighter modernizr - A JavaScript toolkit that allows web developers to use new CSS3 and HTML5 features while maintaining a fine level of control over browsers that don\u0026rsquo;t support Tooling Netlify - Continuous deployement and hosting of this documentation Hugo "},{"uri":"https://nightshadelink.github.io/hm_oop-cheatsheet/oop/instanzvariablen/","title":"Instanzvariablen","tags":[],"description":"","content":" Instanzvariablen sind nur innerhalb der Klasse sichtbar mit Hilfe von getter und setter können diese abgerufen oder verändert werden setter sind vom typ void und sollten als Argument den Datentyp der jeweiligen Instanzvariable haben getter geben den Datentyp zurück der Instanzvariable und sollten keine Argumente haben durch den this Operator kann man auf die Instanzvariablen direkt zugreifen Beispiel: Einfache Klasse:\npublic class Fahrzeug { private String name; } Beispiel Klasse mit getter und setter:\npublic class Fahrzeug { private String name; public void setName(String name){ this.name = name; } public String getName(){ return this.name; } } "},{"uri":"https://nightshadelink.github.io/hm_oop-cheatsheet/oop/klassendeklaration_mit_vererbung/","title":"Klassen Deklaration mit Vererbung","tags":[],"description":"","content":"class Auto extends Fahrzeug { private String nummernSchild; public void abs(){ // code } } Die Klasse Auto ist eine Unterklasse von der Klasse Fahrzeug (Spezialisierung) Die Klasse Auto übernimmt automatisch alle Funktionen und Attribute der Klasse Fahrzeug Die Klasse Auto kann die Funktionen der Klasse Fahrzeug erweitern und/oder überschreiben mit super können Methoden und Variablen der Basis-Klasse direkt aufgerufen werden dies gilt auch für den Konstruktor Konstruktoren Jede Klasse hat automatisch einen gleichnamigen Konstruktor dieser kann explizt sein (angegeben) oder implizit (nicht angegeben) sein Der Konstruktor wird automatisch beim Erstellen eines Objekt ausgeführt Konstruktoren haben keinen return Wert Beispiel:\npublic class Fahrzeug { private String name; // Konstruktor ohne Argumente public Fahrzeug(){ // code } // Konstruktor mit Argumenten public Fahrzeug(String name){ // code this.name = name; } } "},{"uri":"https://nightshadelink.github.io/hm_oop-cheatsheet/oop/klassendeklaration/","title":"Klassendeklaration","tags":[],"description":"","content":"class MyClass { // Instanzvariablen // Instanzmethoden } Beispiel:\npublic class Fahrzeug { private String name; public void fahr(){ // code } } "},{"uri":"https://nightshadelink.github.io/hm_oop-cheatsheet/oop/","title":"Konzept: OOP","tags":[],"description":"","content":""},{"uri":"https://nightshadelink.github.io/hm_oop-cheatsheet/oop/methoden/","title":"Methoden","tags":[],"description":"","content":" Code wiederverwenden statt neuschreiben Testbarkeit erhöhen Lesbarkeit verbessern Allgemein\n\u0026lt;Sichtbarkeit\u0026gt; \u0026lt;Rückgabewert\u0026gt; \u0026lt;Methodenname\u0026gt;(\u0026lt;Parameter\u0026gt;){ // Code } Beispiel:\n// addition zweier Zahlen a und b public int sum (int a, int b) { // lokale variable int result; // Berechnung result = a + b; // Ergebnis zurückgeben return result; } Vereinfacht:\n// addition zweier Zahlen a und b public int sum (int a, int b) { // Ergebnis direkt zurückgeben return (a + b); } "},{"uri":"https://nightshadelink.github.io/hm_oop-cheatsheet/oop/object/","title":"Objekt","tags":[],"description":"","content":"// Deklaration einer Variable vom Objekt-Typ \u0026#34;String\u0026#34; String s; // Konstruktur aufrufen s = new String (\u0026#34;Hallo Welt\u0026#34;); // Klassenmethode ausführen die sich auf den Inhalt der Variable bezieht char c = s.chartAt(4); "},{"uri":"https://nightshadelink.github.io/hm_oop-cheatsheet/","title":"OOP-Cheatsheet","tags":[],"description":"","content":"OOP-Cheatsheet In diesem Cheatsheet werden alle für die Prüfung relevanten Themen rund um OOP in Java zusammengefasst.\nEin Teil der Dokumentation ist selbst formuliert und nur an die Vorlesung angelehnt. Vorlesungsunerlagen und Beispiele hängen in den Static links mit an.\nBitte gerne um Vervollständigung!\n"},{"uri":"https://nightshadelink.github.io/hm_oop-cheatsheet/oop/polymorphismus/","title":"Polymorphismus","tags":[],"description":"","content":" Die Vielfältigkeit bei der Objekte in verschiedenen Situationen verschieden reagieren können Variante 1: Methodenüberladung Deklaration einer Methode mit verschiedenen übergabe Parametern je nachdem mit wie viel Parametern die Methode aufgerufen wird, verändert sie das Verhalten der Klasse public class Fahrzeug { private String name; // Methode ohne Argumente public faehrt(){ // code } // Methode mit Argumenten public faehrt(String Richtung){ // code } // Methode mit Argumenten public faehrt(String Richtung, int Geschwindigkeit){ // code } } Variante 2: Methodenüberschreibung Die Subklasse (Kindklasse) kann Methoden der Basisklasse (Eltern-Klasse) überschreiben Basis-Klasse Fahrzeug\npublic class Fahrzeug { private String name; // Methode ohne Argumente public faehrt(){ // code System.out.println(\u0026#34;Das Fahrzeug fährt\u0026#34;); } } Sub-Klasse erbt alle Funktionen und überschreibt die \u0026ldquo;faehrt\u0026rdquo; Methode\npublic class Auto implements Fahrzeug{ @Override public void faehrt(){ System.out.println(\u0026#34;Das Auto fährt\u0026#34;); } } Beispiel aufruf\n// Basis-Klasse // gibt \u0026#34;Das Fahrzeug fährt\u0026#34; auf der Konsole aus Fahrzeug fahrzeug = new Fahrzeug(); fahrzeug.faehrt(); // Sub-Klasse // gibt \u0026#34;Das Auto fährt\u0026#34; auf der Konsole aus Fahrzeug auto = new Auto(); auto.faehrt(); "},{"uri":"https://nightshadelink.github.io/hm_oop-cheatsheet/showcase/","title":"Showcase","tags":[],"description":"","content":"TAT by OVH Tshark.dev by Ross Jacobs inteliver by Amir Lavasani "},{"uri":"https://nightshadelink.github.io/hm_oop-cheatsheet/tags/","title":"Tags","tags":[],"description":"","content":""},{"uri":"https://nightshadelink.github.io/hm_oop-cheatsheet/vorlesungsthemen/","title":"Vorlesungsthemen","tags":[],"description":"","content":"Übersicht Einführung Objektorientierte Programmierung Attachments 01_einfuehrung_objektorientierte_programmierung.pdf (312 KB) Attachments 01_sum.java (569 B) Datentypen und Variablen Attachments 02_datentypen_und_variablen.pdf (459 KB) Objektorientierte Konzepte Attachments 03_objektorientierte_konzepte.pdf (212 KB) Objektvariablen Attachments 04_objektvariablen.pdf (128 KB) Attachments 04_account.zip (1 KB) Methoden und Konstruktoren Attachments 05_methoden_und_konstruktoren.pdf (164 KB) Attachments 05_rational.zip (1 KB) ArrayList Einführung / Testen mit JUnit 5 / Dokumentation mit Javadoc Attachments 06_arraylist.pdf (71 KB) 06_dokumentation_mit_javadoc.pdf (76 KB) 06_testen_mit_junit-5.pdf (121 KB) Statische Klassenelemente Attachments 07_statische_klassenelemente.pdf (165 KB) Attachments 07_enum_beispiele.zip (2 KB) 07_immutablerational.java (3 KB) UML und Interfaces Teil 1 Attachments 08_uml_und_interfaces_teil-1.pdf (152 KB) Attachments 08_copy_shop.zip (1 KB) 08_shapes.zip (1 KB) Teil 2 Attachments 09_uml_und_interfaces_teil-2.pdf (115 KB) Attachments 09_default_interface.zip (1 KB) Vererbung Attachments 10_Vererbung.pdf (300 KB) Attachments 10_inheritance2.zip (1 KB) 10_inheritance2_erweitert-um-abstract-und-redefinition.zip (1 KB) Die Klasse Object Attachments 11_Die Klasse Object.pdf (147 KB) "}]